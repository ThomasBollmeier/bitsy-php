(* 
Parsian grammar file for bitsy language
Version: 0.1.0
*)

comment '{' '}';

-- Tokens

symbol EQ '=';
symbol PLUS '+';
symbol MINUS '-';
symbol MULT '*';
symbol DIV '/';
symbol MOD '%';
symbol LPAR '(';
symbol RPAR ')';

token VAR_NAME /[_A-Za-z]+/;
token INT /[0-9]+/;

-- Rules

@root
program -> 'BEGIN' block#block 'END';

block -> stmt*;

stmt -> if_statement | loop | break | print | read | assignment => child;

if_statement -> if_keyword expression block ('ELSE' alt#block)? 'END';

if_keyword -> 'IFZ' | 'IFP' | 'IFN' => child;

loop -> 'LOOP' block#block 'END';

break -> 'BREAK' => { 
    :name "break" 
};

print -> 'PRINT' expr#expression => {
    :name "print"
    :children [#expr]
};

read -> 'READ' var#VAR_NAME => {
    :name "print"
    :children [#var]
};

assignment -> lhs#VAR_NAME EQ rhs#expression => {
    :name "assign"
    :children [#lhs #rhs]    
};

expression -> term (add_op term)*;

add_op -> PLUS | MINUS => child;

term -> signed_factor (mul_op factor)*;

signed_factor -> sign#add_op? factor#factor;

mul_op -> MULT | DIV | MOD => child; 

factor -> INT | VAR_NAME | group => child;

group -> LPAR expr#expression RPAR => {
    :name "group"
    :children [#expr]
}; 
